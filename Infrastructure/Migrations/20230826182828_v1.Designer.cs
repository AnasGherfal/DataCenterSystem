// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230826182828_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.AdminRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 51, DateTimeKind.Utc).AddTicks(6300));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SecondaryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 51, DateTimeKind.Utc).AddTicks(6674));

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(3411));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(3724));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.CompanionForVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("IdentityType")
                        .HasColumnType("smallint");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("CompanionForVisit");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("DocumentForCustomers");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForRepresentative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("DocumentForRepresentatives");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FileType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("DocumentForSubscriptions");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.RepresentativeForVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeId");

                    b.HasIndex("VisitId");

                    b.ToTable("RepresentativeForVisit");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.VisitForInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitForInvoice");
                });

            modelBuilder.Entity("Infrastructure.Entities.Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 51, DateTimeKind.Utc).AddTicks(8137));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("IdentityType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 51, DateTimeKind.Utc).AddTicks(8485));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Representatives", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcpPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountOfPower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 51, DateTimeKind.Utc).AddTicks(9897));

                    b.Property<string>("Dns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MonthlyVisits")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(188));

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(1531));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan>("MonthlyVisits")
                        .HasColumnType("time");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(1863));

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.TimeShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(5212));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PriceForFirstHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForRemainingHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(5483));

                    b.HasKey("Id");

                    b.ToTable("TimeShifts", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(6706));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedStartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 8, 26, 18, 28, 28, 52, DateTimeKind.Utc).AddTicks(7067));

                    b.Property<decimal>("VisitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("VisitType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Visits", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Events.Abstracts.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId", "DateTime")
                        .IsUnique();

                    b.ToTable("EventStore", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminLockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminPasswordChangedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminPasswordResetEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminUnlockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Infrastructure.Events.Admin.AdminUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4001);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4005);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerFileUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4006);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerLockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4003);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerUnlockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4004);
                });

            modelBuilder.Entity("Infrastructure.Events.Customer.CustomerUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(4002);
                });

            modelBuilder.Entity("Infrastructure.Events.Invoice.InvoiceCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(7001);
                });

            modelBuilder.Entity("Infrastructure.Events.Invoice.InvoicePaidEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(7002);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3001);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3005);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeFileUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3006);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeLockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3003);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeUnlockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3004);
                });

            modelBuilder.Entity("Infrastructure.Events.Representative.RepresentativeUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(3002);
                });

            modelBuilder.Entity("Infrastructure.Events.Service.ServiceCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1001);
                });

            modelBuilder.Entity("Infrastructure.Events.Service.ServiceDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1005);
                });

            modelBuilder.Entity("Infrastructure.Events.Service.ServiceLockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1003);
                });

            modelBuilder.Entity("Infrastructure.Events.Service.ServiceUnlockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1004);
                });

            modelBuilder.Entity("Infrastructure.Events.Service.ServiceUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(1002);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2001);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2005);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionFileUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2006);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionLockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2003);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionRenewedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2002);
                });

            modelBuilder.Entity("Infrastructure.Events.Subscription.SubscriptionUnlockedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(2004);
                });

            modelBuilder.Entity("Infrastructure.Events.TimeShift.TimeShiftCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(5001);
                });

            modelBuilder.Entity("Infrastructure.Events.TimeShift.TimeShiftDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(5003);
                });

            modelBuilder.Entity("Infrastructure.Events.TimeShift.TimeShiftUpdatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(5002);
                });

            modelBuilder.Entity("Infrastructure.Events.Visit.VisitCreatedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(6001);
                });

            modelBuilder.Entity("Infrastructure.Events.Visit.VisitDeletedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(6004);
                });

            modelBuilder.Entity("Infrastructure.Events.Visit.VisitEndedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(6003);
                });

            modelBuilder.Entity("Infrastructure.Events.Visit.VisitStartedEvent", b =>
                {
                    b.HasBaseType("Infrastructure.Events.Abstracts.Event");

                    b.Property<string>("Data")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.HasDiscriminator().HasValue(6002);
                });

            modelBuilder.Entity("Infrastructure.Entities.Invoice", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.CompanionForVisit", b =>
                {
                    b.HasOne("Infrastructure.Entities.Visit", null)
                        .WithMany("Companions")
                        .HasForeignKey("VisitId");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForCustomer", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", null)
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForRepresentative", b =>
                {
                    b.HasOne("Infrastructure.Entities.Representative", null)
                        .WithMany("Documents")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.DocumentForSubscription", b =>
                {
                    b.HasOne("Infrastructure.Entities.Subscription", null)
                        .WithMany("Documents")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.RepresentativeForVisit", b =>
                {
                    b.HasOne("Infrastructure.Entities.Representative", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId");

                    b.HasOne("Infrastructure.Entities.Visit", null)
                        .WithMany("Representatives")
                        .HasForeignKey("VisitId");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Infrastructure.Entities.Mappers.VisitForInvoice", b =>
                {
                    b.HasOne("Infrastructure.Entities.Invoice", null)
                        .WithMany("Visits")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitId");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Infrastructure.Entities.Representative", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany("Representatives")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Infrastructure.Entities.Subscription", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infrastructure.Entities.Visit", b =>
                {
                    b.HasOne("Infrastructure.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Entities.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Entities.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Infrastructure.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Representatives");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Infrastructure.Entities.Invoice", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Infrastructure.Entities.Representative", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Infrastructure.Entities.Subscription", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Infrastructure.Entities.Visit", b =>
                {
                    b.Navigation("Companions");

                    b.Navigation("Representatives");
                });
#pragma warning restore 612, 618
        }
    }
}
